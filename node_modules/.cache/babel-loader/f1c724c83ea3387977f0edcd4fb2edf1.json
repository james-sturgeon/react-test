{"ast":null,"code":"import { ActionTypes } from \"./Types\";\nexport const CartReducer = (storeData, action) => {\n  let newStore = {\n    cart: [],\n    cartItems: 0,\n    cartPrice: 0,\n    ...storeData\n  };\n\n  switch (action.type) {\n    case ActionTypes.CART_ADD:\n      const p = action.payload.product;\n      const q = action.payload.quantity;\n      let existing = newStore.cart.find(item => item.product.id === p.id);\n\n      if (existing) {\n        existing.quantity += q;\n      } else {\n        newStore.cart = [...newStore.cart, action.payload];\n      }\n\n      newStore.cartItems += q;\n      newStore.cartPrice += p.price * q;\n      return newStore;\n\n    case ActionTypes.CART_UPDATE:\n      newStore.cart = newStore.cart.map(item => {\n        if (item.product.id === action.payload.product.id) {\n          const diff = action.payload.quantity - item.quantity;\n          newStore.cartItems += diff;\n          newStore.cartPrice += item.product.price * diff;\n          return action.payload;\n        } else {\n          return item;\n        }\n      });\n      return newStore;\n\n    case ActionTypes.CART_REMOVE:\n      let selection = newStore.cart.find(item => item.product.id === action.payload.id);\n      newStore.cartItems -= selection.quantity;\n      newStore.cartPrice -= selection.quantity * selection.product.price;\n      newStore.cart = newStore.cart.filter(item => item !== selection);\n      return newStore;\n\n    case ActionTypes.CART_CLEAR:\n      return { ...storeData,\n        cart: [],\n        cartItems: 0,\n        cartPrice: 0\n      };\n\n    default:\n      return storeData || {};\n  }\n};\n_c = CartReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"sources":["/Users/sturgeoj/Documents/sports-store/src/data/CartReducer.js"],"names":["ActionTypes","CartReducer","storeData","action","newStore","cart","cartItems","cartPrice","type","CART_ADD","p","payload","product","q","quantity","existing","find","item","id","price","CART_UPDATE","map","diff","CART_REMOVE","selection","filter","CART_CLEAR"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAChD,MAAIC,QAAQ,GAAG;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,SAAS,EAAE,CAAvB;AAA0BC,IAAAA,SAAS,EAAE,CAArC;AAAwC,OAAGL;AAA3C,GAAf;;AACA,UAAQC,MAAM,CAACK,IAAf;AACE,SAAKR,WAAW,CAACS,QAAjB;AACE,YAAMC,CAAC,GAAGP,MAAM,CAACQ,OAAP,CAAeC,OAAzB;AACA,YAAMC,CAAC,GAAGV,MAAM,CAACQ,OAAP,CAAeG,QAAzB;AAEA,UAAIC,QAAQ,GAAGX,QAAQ,CAACC,IAAT,CAAcW,IAAd,CAAoBC,IAAD,IAAUA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBR,CAAC,CAACQ,EAAnD,CAAf;;AACA,UAAIH,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACD,QAAT,IAAqBD,CAArB;AACD,OAFD,MAEO;AACLT,QAAAA,QAAQ,CAACC,IAAT,GAAgB,CAAC,GAAGD,QAAQ,CAACC,IAAb,EAAmBF,MAAM,CAACQ,OAA1B,CAAhB;AACD;;AACDP,MAAAA,QAAQ,CAACE,SAAT,IAAsBO,CAAtB;AACAT,MAAAA,QAAQ,CAACG,SAAT,IAAsBG,CAAC,CAACS,KAAF,GAAUN,CAAhC;AACA,aAAOT,QAAP;;AAEF,SAAKJ,WAAW,CAACoB,WAAjB;AACEhB,MAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcgB,GAAd,CAAmBJ,IAAD,IAAU;AAC1C,YAAIA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBf,MAAM,CAACQ,OAAP,CAAeC,OAAf,CAAuBM,EAA/C,EAAmD;AACjD,gBAAMI,IAAI,GAAGnB,MAAM,CAACQ,OAAP,CAAeG,QAAf,GAA0BG,IAAI,CAACH,QAA5C;AACAV,UAAAA,QAAQ,CAACE,SAAT,IAAsBgB,IAAtB;AACAlB,UAAAA,QAAQ,CAACG,SAAT,IAAsBU,IAAI,CAACL,OAAL,CAAaO,KAAb,GAAqBG,IAA3C;AACA,iBAAOnB,MAAM,CAACQ,OAAd;AACD,SALD,MAKO;AACL,iBAAOM,IAAP;AACD;AACF,OATe,CAAhB;AAUA,aAAOb,QAAP;;AAEF,SAAKJ,WAAW,CAACuB,WAAjB;AACE,UAAIC,SAAS,GAAGpB,QAAQ,CAACC,IAAT,CAAcW,IAAd,CACbC,IAAD,IAAUA,IAAI,CAACL,OAAL,CAAaM,EAAb,KAAoBf,MAAM,CAACQ,OAAP,CAAeO,EAD/B,CAAhB;AAGAd,MAAAA,QAAQ,CAACE,SAAT,IAAsBkB,SAAS,CAACV,QAAhC;AACAV,MAAAA,QAAQ,CAACG,SAAT,IAAsBiB,SAAS,CAACV,QAAV,GAAqBU,SAAS,CAACZ,OAAV,CAAkBO,KAA7D;AACAf,MAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcoB,MAAd,CAAsBR,IAAD,IAAUA,IAAI,KAAKO,SAAxC,CAAhB;AACA,aAAOpB,QAAP;;AAEF,SAAKJ,WAAW,CAAC0B,UAAjB;AACE,aAAO,EAAE,GAAGxB,SAAL;AAAgBG,QAAAA,IAAI,EAAE,EAAtB;AAA0BC,QAAAA,SAAS,EAAE,CAArC;AAAwCC,QAAAA,SAAS,EAAE;AAAnD,OAAP;;AAEF;AACE,aAAOL,SAAS,IAAI,EAApB;AAzCJ;AA2CD,CA7CM;KAAMD,W","sourcesContent":["import { ActionTypes } from \"./Types\";\n\nexport const CartReducer = (storeData, action) => {\n  let newStore = { cart: [], cartItems: 0, cartPrice: 0, ...storeData };\n  switch (action.type) {\n    case ActionTypes.CART_ADD:\n      const p = action.payload.product;\n      const q = action.payload.quantity;\n\n      let existing = newStore.cart.find((item) => item.product.id === p.id);\n      if (existing) {\n        existing.quantity += q;\n      } else {\n        newStore.cart = [...newStore.cart, action.payload];\n      }\n      newStore.cartItems += q;\n      newStore.cartPrice += p.price * q;\n      return newStore;\n\n    case ActionTypes.CART_UPDATE:\n      newStore.cart = newStore.cart.map((item) => {\n        if (item.product.id === action.payload.product.id) {\n          const diff = action.payload.quantity - item.quantity;\n          newStore.cartItems += diff;\n          newStore.cartPrice += item.product.price * diff;\n          return action.payload;\n        } else {\n          return item;\n        }\n      });\n      return newStore;\n\n    case ActionTypes.CART_REMOVE:\n      let selection = newStore.cart.find(\n        (item) => item.product.id === action.payload.id\n      );\n      newStore.cartItems -= selection.quantity;\n      newStore.cartPrice -= selection.quantity * selection.product.price;\n      newStore.cart = newStore.cart.filter((item) => item !== selection);\n      return newStore;\n\n    case ActionTypes.CART_CLEAR:\n      return { ...storeData, cart: [], cartItems: 0, cartPrice: 0 };\n\n    default:\n      return storeData || {};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}