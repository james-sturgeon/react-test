{"ast":null,"code":"import { graphql } from \"react-apollo\";\nimport * as compose from \"lodash.flowright\";\nimport { ProductsTable } from \"./ProductsTables\";\nimport { productsList } from \"./clientQueries\";\nimport { deleteProduct } from \"./clientMutation\";\nconst vars = {\n  page: 1,\n  pageSize: 10,\n  sort: \"id\"\n};\nexport const ConnectedProducts = compose(graphql(productsList, {\n  options: props => ({\n    variables: vars\n  }),\n  props: _ref => {\n    let {\n      data: {\n        loading,\n        products,\n        refetch\n      }\n    } = _ref;\n    return {\n      totalSize: loading ? 0 : products.totalSize,\n      products: loading ? [] : products.products,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(products.totalSize / vars.pageSize),\n      navigatToPage: page => {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: size => {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: key => {\n        vars.sort = key;\n        refetch(vars);\n      }\n    };\n  }\n}), graphql(deleteProduct, {\n  options: {\n    update: (cache, _ref2) => {\n      let {\n        data: {\n          deleteProduct: {\n            id\n          }\n        }\n      } = _ref2;\n      const queryDetails = {\n        query: productsList,\n        variables: vars\n      };\n      const data = cache.readQuery(queryDetails);\n      data.products.products = data.products.products.filter(p => p.id !== id);\n      data.products.totalSize = data.products.totalSize - 1;\n      cache.writeQuery({ ...queryDetails,\n        data\n      });\n    }\n  },\n  props: _ref3 => {\n    let {\n      mutate\n    } = _ref3;\n    return {\n      deleteProduct: id => mutate({\n        variables: {\n          id\n        }\n      })\n    };\n  }\n}))(ProductsTable);","map":{"version":3,"sources":["/Users/sturgeoj/Documents/sports-store/src/admin/ProductsConnector.js"],"names":["graphql","compose","ProductsTable","productsList","deleteProduct","vars","page","pageSize","sort","ConnectedProducts","options","props","variables","data","loading","products","refetch","totalSize","currentPage","pageCount","Math","ceil","navigatToPage","Number","setPageSize","size","sortKey","setSortProperty","key","update","cache","id","queryDetails","query","readQuery","filter","p","writeQuery","mutate"],"mappings":"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","sourcesContent":["import { graphql } from \"react-apollo\";\nimport * as compose from \"lodash.flowright\";\nimport { ProductsTable } from \"./ProductsTables\";\nimport { productsList } from \"./clientQueries\";\nimport { deleteProduct } from \"./clientMutation\";\n\nconst vars = {\n  page: 1,\n  pageSize: 10,\n  sort: \"id\",\n};\n\nexport const ConnectedProducts = compose(\n  graphql(productsList, {\n    options: (props) => ({ variables: vars }),\n    props: ({ data: { loading, products, refetch } }) => ({\n      totalSize: loading ? 0 : products.totalSize,\n      products: loading ? [] : products.products,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(products.totalSize / vars.pageSize),\n      navigatToPage: (page) => {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: (size) => {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: (key) => {\n        vars.sort = key;\n        refetch(vars);\n      },\n    }),\n  }),\n  graphql(deleteProduct, {\n    options: {\n      update: (\n        cache,\n        {\n          data: {\n            deleteProduct: { id },\n          },\n        }\n      ) => {\n        const queryDetails = { query: productsList, variables: vars };\n        const data = cache.readQuery(queryDetails);\n        data.products.products = data.products.products.filter(\n          (p) => p.id !== id\n        );\n        data.products.totalSize = data.products.totalSize - 1;\n        cache.writeQuery({ ...queryDetails, data });\n      },\n    },\n    props: ({ mutate }) => ({\n      deleteProduct: (id) => mutate({ variables: { id } }),\n    }),\n  })\n)(ProductsTable);\n"]},"metadata":{},"sourceType":"module"}