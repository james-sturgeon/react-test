{"ast":null,"code":"import { graphql } from \"react-apollo\";\nimport * as compose from \"lodash.flowright\";\nimport { ordersSummaryQuery } from \"./clientQueries\";\nimport { OrdersTable } from \"./OrdersTable\";\nimport { shipOrder } from \"./clientMutations\";\nconst vars = {\n  onlyShipped: false,\n  page: 1,\n  pageSize: 10,\n  sort: \"id\"\n};\nexport const OrdersConnector = compose(graphql(ordersSummaryQuery, {\n  options: props => ({\n    variables: vars\n  }),\n  props: _ref => {\n    let {\n      data: {\n        loading,\n        orders,\n        refetch\n      }\n    } = _ref;\n    return {\n      totalSize: loading ? 0 : orders.totalSize,\n      orders: loading ? [] : orders.orders,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(orders.totalSize / vars.pageSize),\n      navigateToPage: page => {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: size => {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: key => {\n        vars.sort = key;\n        refetch(vars);\n      }\n    };\n  }\n}), graphql(shipOrder, {\n  props: _ref2 => {\n    let {\n      mutate\n    } = _ref2;\n    return {\n      toggleShipped: (id, shipped) => mutate({\n        variables: {\n          id,\n          shipped\n        }\n      })\n    };\n  }\n}))(OrdersTable);","map":{"version":3,"sources":["/Users/sturgeoj/Documents/sports-store/src/admin/OrdersConnector.js"],"names":["graphql","compose","ordersSummaryQuery","OrdersTable","shipOrder","vars","onlyShipped","page","pageSize","sort","OrdersConnector","options","props","variables","data","loading","orders","refetch","totalSize","currentPage","pageCount","Math","ceil","navigateToPage","Number","setPageSize","size","sortKey","setSortProperty","key","mutate","toggleShipped","id","shipped"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,WAAW,EAAE,KADF;AAEXC,EAAAA,IAAI,EAAE,CAFK;AAGXC,EAAAA,QAAQ,EAAE,EAHC;AAIXC,EAAAA,IAAI,EAAE;AAJK,CAAb;AAOA,OAAO,MAAMC,eAAe,GAAGT,OAAO,CACpCD,OAAO,CAACE,kBAAD,EAAqB;AAC1BS,EAAAA,OAAO,EAAGC,KAAD,KAAY;AAAEC,IAAAA,SAAS,EAAER;AAAb,GAAZ,CADiB;AAE1BO,EAAAA,KAAK,EAAE;AAAA,QAAC;AAAEE,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBC,QAAAA;AAAnB;AAAR,KAAD;AAAA,WAA6C;AAClDC,MAAAA,SAAS,EAAEH,OAAO,GAAG,CAAH,GAAOC,MAAM,CAACE,SADkB;AAElDF,MAAAA,MAAM,EAAED,OAAO,GAAG,EAAH,GAAQC,MAAM,CAACA,MAFoB;AAGlDG,MAAAA,WAAW,EAAEd,IAAI,CAACE,IAHgC;AAIlDa,MAAAA,SAAS,EAAEL,OAAO,GAAG,CAAH,GAAOM,IAAI,CAACC,IAAL,CAAUN,MAAM,CAACE,SAAP,GAAmBb,IAAI,CAACG,QAAlC,CAJyB;AAKlDe,MAAAA,cAAc,EAAGhB,IAAD,IAAU;AACxBF,QAAAA,IAAI,CAACE,IAAL,GAAYiB,MAAM,CAACjB,IAAD,CAAlB;AACAU,QAAAA,OAAO,CAACZ,IAAD,CAAP;AACD,OARiD;AASlDG,MAAAA,QAAQ,EAAEH,IAAI,CAACG,QATmC;AAUlDiB,MAAAA,WAAW,EAAGC,IAAD,IAAU;AACrBrB,QAAAA,IAAI,CAACG,QAAL,GAAgBgB,MAAM,CAACE,IAAD,CAAtB;AACAT,QAAAA,OAAO,CAACZ,IAAD,CAAP;AACD,OAbiD;AAclDsB,MAAAA,OAAO,EAAEtB,IAAI,CAACI,IAdoC;AAelDmB,MAAAA,eAAe,EAAGC,GAAD,IAAS;AACxBxB,QAAAA,IAAI,CAACI,IAAL,GAAYoB,GAAZ;AACAZ,QAAAA,OAAO,CAACZ,IAAD,CAAP;AACD;AAlBiD,KAA7C;AAAA;AAFmB,CAArB,CAD6B,EAwBpCL,OAAO,CAACI,SAAD,EAAY;AACjBQ,EAAAA,KAAK,EAAE;AAAA,QAAC;AAAEkB,MAAAA;AAAF,KAAD;AAAA,WAAiB;AACtBC,MAAAA,aAAa,EAAE,CAACC,EAAD,EAAKC,OAAL,KAAiBH,MAAM,CAAC;AAAEjB,QAAAA,SAAS,EAAE;AAAEmB,UAAAA,EAAF;AAAMC,UAAAA;AAAN;AAAb,OAAD;AADhB,KAAjB;AAAA;AADU,CAAZ,CAxB6B,CAAP,CA6B7B9B,WA7B6B,CAAxB","sourcesContent":["import { graphql } from \"react-apollo\";\nimport * as compose from \"lodash.flowright\";\nimport { ordersSummaryQuery } from \"./clientQueries\";\nimport { OrdersTable } from \"./OrdersTable\";\nimport { shipOrder } from \"./clientMutations\";\n\nconst vars = {\n  onlyShipped: false,\n  page: 1,\n  pageSize: 10,\n  sort: \"id\",\n};\n\nexport const OrdersConnector = compose(\n  graphql(ordersSummaryQuery, {\n    options: (props) => ({ variables: vars }),\n    props: ({ data: { loading, orders, refetch } }) => ({\n      totalSize: loading ? 0 : orders.totalSize,\n      orders: loading ? [] : orders.orders,\n      currentPage: vars.page,\n      pageCount: loading ? 0 : Math.ceil(orders.totalSize / vars.pageSize),\n      navigateToPage: (page) => {\n        vars.page = Number(page);\n        refetch(vars);\n      },\n      pageSize: vars.pageSize,\n      setPageSize: (size) => {\n        vars.pageSize = Number(size);\n        refetch(vars);\n      },\n      sortKey: vars.sort,\n      setSortProperty: (key) => {\n        vars.sort = key;\n        refetch(vars);\n      },\n    }),\n  }),\n  graphql(shipOrder, {\n    props: ({ mutate }) => ({\n      toggleShipped: (id, shipped) => mutate({ variables: { id, shipped } }),\n    }),\n  })\n)(OrdersTable);\n"]},"metadata":{},"sourceType":"module"}